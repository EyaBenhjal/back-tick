const express = require("express");
const mongoose = require("mongoose");
mongoose.set('strictQuery', false);
const path = require("path");
const cors = require("cors");
require("dotenv").config();
const NLPService = require('./services/nlpService');
const Solution = require('./models/Solution');
const Category = require('./models/Category');
const app = express();

app.use(cors({
  origin: 'http://localhost:5173', // ou 3000 selon votre port frontend
  credentials: true
}));

// Middlewares
app.use(express.json());

// Routes
const departmentRouter = require("./routes/department.js");
const clientRouter = require("./routes/client.js");
const authRoutes = require("./routes/authRoutes");
const ticketRoutes = require('./routes/ticketRoutes');
const profileRoutes = require("./routes/profileRoutes");
const userRoutes = require("./routes/userRoutes");
const categoryRoutes = require("./routes/category");
const notificationRoutes = require("./routes/notificationRoutes");
const chatbotRoutes = require('./routes/chatbotRoutes');

// Connexion MongoDB
const mongoUrl = process.env.MONGODB_URL;
if (!mongoUrl) {
  console.error("‚ö†Ô∏è ERREUR: MONGODB_URL n'est pas d√©fini dans .env !");
  process.exit(1);
}

async function initializePredefinedSolutions() {
  const solutionsMap = {
    Electricit√©: [
      {
        title: "Disjoncteur saute",
        content: "1. V√©rifiez si plusieurs appareils puissants fonctionnent en m√™me temps\n2. D√©branchez les √©quipements un √† un\n3. Inspectez les prises ou c√¢bles endommag√©s\n4. Si le probl√®me persiste, contactez un √©lectricien",
        keywords: ["disjoncteur", "sauter", "coupure", "√©lectricit√©"]
      }
    ],
    Informatique: [
      {
        title: "Probl√®me WiFi",
        content: "1. Red√©marrer la box\n2. V√©rifier les c√¢bles\n3. R√©initialiser le r√©seau",
        keywords: ["wifi", "internet", "connexion", "r√©seau"]
      }
    ],
    Plomberie: [
      {
        title: "Fuite sous l'√©vier",
        content: "1. Coupez l'arriv√©e d'eau principale\n2. Identifiez l'origine de la fuite\n3. Remplacez ou resserrez les √©l√©ments d√©fectueux",
        keywords: ["fuite", "√©vier", "tuyau", "siphon"]
      }
    ],
     T√©l√©vision: [
    {
      "title": "√âcran noir ou sans signal",
      "content": "1. V√©rifiez que la t√©l√©vision est correctement aliment√©e.\n2. Contr√¥lez les branchements HDMI ou antenne.\n3. Relancez la recherche de cha√Ænes ou r√©initialisez l‚Äôappareil.",
      "keywords": ["t√©l√©vision", "√©cran noir", "signal", "antenne", "HDMI"]
    }
  ]
  };

  try {
    for (const [categoryName, solutions] of Object.entries(solutionsMap)) {
      const category = await Category.findOne({ cat_name: categoryName });
      if (!category) continue;

      for (const solution of solutions) {
        await Solution.findOneAndUpdate(
          { title: solution.title, category: category._id },
          { ...solution, category: category._id },
          { upsert: true }
        );
      }
    }
    console.log('‚úÖ Solutions pr√©d√©finies initialis√©es');
  } catch (error) {
    console.error('‚ùå Erreur initialisation solutions:', error);
  }
}

async function startServer() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(mongoUrl, { 
      useNewUrlParser: true, 
      useUnifiedTopology: true 
    });
    console.log("‚úÖ Mongodb connect√©...");

    // Initialisation des solutions
    await initializePredefinedSolutions();

    // D√©finition des routes
    app.use("/api/auth", authRoutes);
    app.use('/api', ticketRoutes);
    app.use("/api/profile", profileRoutes);
    app.use("/api/department", departmentRouter);
    app.use("/api/client", clientRouter);
    app.use("/api/users", userRoutes);
    app.use("/api/category", categoryRoutes);
    app.use("/api/notifications", notificationRoutes);
    app.use("/api/chatbot", chatbotRoutes);
    app.use('/uploads', express.static(path.join(__dirname, 'public', 'uploads')));
    
    if (process.env.NODE_ENV === "production") {
      app.use(express.static(path.resolve(__dirname, "../frontend/build")));
      app.get("*", (req, res) => res.sendFile(path.resolve(__dirname, "../frontend/build/index.html")));
    }
    
    app.use('/tickets', express.static(path.join(__dirname, 'public', 'tickets')));

    // D√©marrage du serveur
    const port = process.env.PORT || 5000;
    const server = app.listen(port, () => {
      console.log(`üöÄ Backend is running on port ${port}`);
    });

    // WebSocket
    const { setupWebSocket, sendNotification } = require('./websocket');
    const wss = setupWebSocket(server);

    // Exposer wss pour l'utiliser dans les contr√¥leurs
    app.set('wss', wss);
    app.use('/api/notifications', (req, res, next) => {
      req.wss = wss;
      next();
    }, notificationRoutes);

  } catch (error) {
    console.error("‚ùå Erreur lors du d√©marrage du serveur:", error);
    process.exit(1);
  }
}

startServer();
app.use(cors({
  origin: 'http://localhost:5173',
  credentials: true,
  allowedHeaders: ['Content-Type', 'Authorization']
}));